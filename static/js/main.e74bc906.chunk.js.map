{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e74bc906.chunk.js","sourcesContent":[" import React from 'react';\r\n import AppBar from 'material-ui/AppBar';\r\n \r\n const NavBar=() => <AppBar title=\"PixaBay Image Finder\"/>\r\n export default NavBar;","\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GridList, GridTile } from 'material-ui/GridList';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nclass ImageResults extends Component {\r\n    state = {\r\n        open: false,\r\n        currentImg: ''\r\n      };\r\n    \r\n      handleOpen = img => {\r\n        this.setState({ open: true, currentImg: img });\r\n      };\r\n    \r\n      handleClose = () => {\r\n        this.setState({ open: false });\r\n      };\r\n\r\n  render() {\r\n      let imageListContent;\r\n        const {images}=this.props;\r\n        if(images){\r\nimageListContent=(\r\n    <GridList cols={3}>\r\n        {images.map(img=>(\r\n            <GridTile\r\n            title={img.tags}\r\n            key={img.id}\r\n            subtitle={\r\n                <span>\r\n                by <strong>{img.user}</strong>\r\n                </span>\r\n            }\r\n            actionIcon={\r\n                <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\r\n                <ZoomIn color=\"white\"/>\r\n                </IconButton>\r\n            }\r\n            >\r\n            <img src={img.largeImageURL} alt=\"\"/>\r\n            </GridTile>\r\n            \r\n        ))}     \r\n    </GridList>\r\n);\r\n      }else{\r\n          imageListContent=null;\r\n      }\r\n      const actions = [\r\n        <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\r\n      ];\r\n    return (\r\n      <div>\r\n        {imageListContent}\r\n        <Dialog\r\n        actions={actions}\r\n        modal={false}\r\n        open={this.state.open}\r\n        onRequestClose={this.handleClose}\r\n      >\r\n        <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} />\r\n      </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nImageResults.propTypes = {\r\n    images: PropTypes.array.isRequired\r\n  };\r\n  \r\n// ImageResults.PropTypes={\r\n//     images:PropTypes.array.isRequired\r\n// }\r\nexport default ImageResults;","import React, { Component } from 'react';\r\nimport TextField from 'material-ui/TextField';\r\nimport SelectField from 'material-ui/SelectField';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport axios from 'axios';\r\nimport ImageResults from '../image-results/ImageResults';\r\n\r\n class Search extends Component {\r\n     state={\r\n         searchText:'',\r\n        amount:15,\r\n    apiUrl:'https://pixabay.com/api',\r\n    apiKey:'11948920-12ddc9795adc0f5fe13acbdf3',\r\n    images:[]\r\n      };\r\n      onTextChange = e => {\r\n    const val = e.target.value;\r\n    this.setState({ [e.target.name]: val }, () => {\r\n      if (val === '') {\r\n        this.setState({ images: [] });\r\n      } else {\r\n        axios\r\n          .get(\r\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\r\n              this.state.searchText\r\n            }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\r\n          )\r\n          .then(res => this.setState({ images: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  };\r\n\r\n  onAmountChange = (e, index, value) => this.setState({ amount: value });\r\n\r\n  render() {\r\n    console.log(this.state.images);\r\n    return (\r\n      <div>\r\n        <TextField\r\n          name=\"searchText\"\r\n          value={this.state.searchText}\r\n          onChange={this.onTextChange}\r\n          floatingLabelText=\"Search For Images\"\r\n          fullWidth={true}\r\n        />\r\n        <br />\r\n        <SelectField\r\n          name=\"amount\"\r\n          floatingLabelText=\"Amount\"\r\n          value={this.state.amount}\r\n          onChange={this.onAmountChange}\r\n        >\r\n          <MenuItem value={5} primaryText=\"5\" />\r\n          <MenuItem value={10} primaryText=\"10\" />\r\n          <MenuItem value={15} primaryText=\"15\" />\r\n          <MenuItem value={30} primaryText=\"30\" />\r\n          <MenuItem value={50} primaryText=\"50\" />\r\n        </SelectField>\r\n        <br />\r\n        {this.state.images.length > 0 ? (\r\n          <ImageResults images={this.state.images} />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport './App.css';\nimport NavBar from './components/navbar/NavBar';\nimport Search from './components/search/Search';\n\nclass App extends Component {\n  render() {\n    return (\n      \n      <MuiThemeProvider>\n      <div>\n      <NavBar/> \n      <Search/>\n      </div>\n      </MuiThemeProvider>\n        \n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}